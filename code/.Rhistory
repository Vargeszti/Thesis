vertex.shape = ifelse(grepl("miR",igraph::V(OPI_g_1 %u% OPI_g_2)$name),
"vrectangle","circle"),edge.width=0.8)
par(mar=c(0.1,0.1,0.1,0.1))
plot(OPI_g_1 %u% OPI_g_2, vertex.label.color="black",
vertex.frame.color="#ffffff",vertex.size= 20, edge.curved=.25,
vertex.color = ifelse(grepl("miR",igraph::V(OPI_g_1 %u% OPI_g_2)$name),
"red",ifelse(igraph::V(OPI_g_1 %u% OPI_g_2)$name == "GLI1",
"yellow","#00CCFF")), edge.color="blue",
vertex.shape = ifelse(grepl("miR",igraph::V(OPI_g_1 %u% OPI_g_2)$name),
"vrectangle","circle"),edge.width=0.8)
par(mar=c(0.1,0.1,0.1,0.1))
plot(OPI_g_1 %u% OPI_g_2, vertex.label.color="black",
vertex.frame.color="#ffffff",vertex.size= 20, edge.curved=.25,
vertex.color = ifelse(grepl("miR",igraph::V(OPI_g_1 %u% OPI_g_2)$name),
"red",ifelse(igraph::V(OPI_g_1 %u% OPI_g_2)$name == "GLI1",
"yellow","#00CCFF")), edge.color="blue",
vertex.shape = ifelse(grepl("miR",igraph::V(OPI_g_1 %u% OPI_g_2)$name),
"vrectangle","circle"),edge.width=0.8)
par(mar=c(0.1,0.1,0.1,0.1))
plot(OPI_g_1 %u% OPI_g_2, vertex.label.color="black",
vertex.frame.color="#ffffff",vertex.size= 20, edge.curved=.25,
vertex.color = ifelse(grepl("miR",igraph::V(OPI_g_1 %u% OPI_g_2)$name),
"red",ifelse(igraph::V(OPI_g_1 %u% OPI_g_2)$name == "GLI1",
"yellow","#00CCFF")), edge.color="blue",
vertex.shape = ifelse(grepl("miR",igraph::V(OPI_g_1 %u% OPI_g_2)$name),
"vrectangle","circle"),edge.width=0.8)
OPI_g_1 <-interaction_graph(interactions = interactions_A_GLI1)
OPI_g_2 <-interaction_graph(interactions = interactions_miRNA_GLI1)
interactions_miRNA_GLI1 <-
dplyr::filter(interactions, target_genesymbol == "GLI1")
print_interactions(interactions_miRNA_GLI1)
interactions_miRNA_GLI1 <-
dplyr::filter(interactions, target_genesymbol == "GLI1")
print_interactions(interactions_miRNA_GLI1)
interactions_miRNA_GLI1 <-
dplyr::filter(interactions, target_genesymbol == "GLI1")
print_interactions(interactions_miRNA_GLI1)
OPI_g_1 <-interaction_graph(interactions = interactions_A_GLI1)
OPI_g_2 <-interaction_graph(interactions = interactions_miRNA_GLI1)
interactions <-
import_miRNAtarget_Interactions(filter_databases=c("miRTarBase","miRecords"))
interactions_miRNA_GLI1 <-
dplyr::filter(interactions, target_genesymbol == "GLI1")
print_interactions(interactions_miRNA_GLI1)
interactions_miRNA_GLI1 <-
dplyr::filter(interactions, target_genesymbol == "GLI1")
print_interactions(interactions_miRNA_GLI1)
OPI_g_1 <-interaction_graph(interactions = interactions_A_GLI1)
OPI_g_2 <-interaction_graph(interactions = interactions_miRNA_GLI1)
interactions <- import_TFregulons_Interactions(filter_databases=c("DoRothEA_A",
"ARACNe-GTEx_DoRothEA"),select_organism=9606)
interactions_A_GLI1 <- dplyr::filter(interactions, dorothea_level=="A",
source_genesymbol == "GLI1")
print_interactions(interactions_A_GLI1)
OPI_g_1 <-interaction_graph(interactions = interactions_A_GLI1)
OPI_g_2 <-interaction_graph(interactions = interactions_miRNA_GLI1)
par(mar=c(0.1,0.1,0.1,0.1))
plot(OPI_g_1 %u% OPI_g_2, vertex.label.color="black",
vertex.frame.color="#ffffff",vertex.size= 20, edge.curved=.25,
vertex.color = ifelse(grepl("miR",igraph::V(OPI_g_1 %u% OPI_g_2)$name),
"red",ifelse(igraph::V(OPI_g_1 %u% OPI_g_2)$name == "GLI1",
"yellow","#00CCFF")), edge.color="blue",
vertex.shape = ifelse(grepl("miR",igraph::V(OPI_g_1 %u% OPI_g_2)$name),
"vrectangle","circle"),edge.width=0.8)
ptms <- import_Omnipath_PTMS()
print_interactions(dplyr::filter(ptms,enzyme_genesymbol=="MAP2K1",
substrate_genesymbol=="MAPK3"))
interactions <- import_Omnipath_Interactions()
ptms <- get_signed_ptms(ptms,interactions)
print_interactions(dplyr::filter(ptms,enzyme_genesymbol=="MAP2K1",
substrate_genesymbol=="MAPK3"))
ptms_g <- ptms_graph(ptms = ptms)
ptms <- import_Omnipath_PTMS(filter_databases=c("PhosphoSite", "Signor"),
+ select_organism=10090)
ptms <- import_Omnipath_PTMS(filter_databases=c("PhosphoSite", "Signor"),
select_organism=10090)
get_complexes_databases()
complexes <- import_Omnipath_complexes(filter_databases=c("CORUM", "hu.MAP"))
query_genes <- c("WRN","PARP1")
complexes_query_genes_any <- unique(get_complex_genes(complexes,query_genes,
total_match=FALSE))
head(complexes_query_genes_any$components_genesymbols,6)
complexes_query_genes_join <- unique(get_complex_genes(complexes,query_genes,
total_match=TRUE))
complexes_query_genes_join$components_genesymbols
genes_complex <-
unlist(strsplit(complexes_query_genes_join$components_genesymbols, "_"))
EnrichmentResults <- gost(genes_complex, significant = TRUE,
user_threshold = 0.001, correction_method = c("fdr"),
sources=c("GO:BP","GO:CC","GO:MF"))
EnrichmentResults$result %>%
dplyr::select(term_id, source, term_name,p_value) %>%
dplyr::top_n(5,-p_value)
get_annotation_databases()
annotations <-import_Omnipath_annotations(select_genes=paste0("COMPLEX:",
complexes_query_genes_join$components_genesymbols))
annotations <-import_Omnipath_annotations(select_genes=paste0("COMPLEX:",
complexes_query_genes_join$components_genesymbols))
head(dplyr::select(annotations,source,label,value),10)
annotations <- import_Omnipath_annotations(select_genes=genes_complex,
filter_databases=c("NetPath"))
dplyr::select(annotations,genesymbol,value)
annotations <-import_Omnipath_annotations(select_genes=genes_complex,
filter_databases=c("ComPPI"))
spread(annotations, label,value) %>%
dplyr::arrange(desc(score)) %>%
dplyr::top_n(10, score)
head(get_intercell_categories(),10)
intercell <- import_Omnipath_intercell()
dplyr::filter(intercell,genesymbol %in% genes_complex) %>%
dplyr::distinct(genesymbol, parent, .keep_all = TRUE) %>%
dplyr::select(category, genesymbol, parent) %>%
dplyr::arrange(genesymbol)
while (!is.null(dev.list())) dev.off()
# We close graphical connections
par(mar=c(0.1,0.1,0.1,0.1))
plot(OPI_g_1 %u% OPI_g_2, vertex.label.color="black",
vertex.frame.color="#ffffff",vertex.size= 20, edge.curved=.25,
vertex.color = ifelse(grepl("miR",igraph::V(OPI_g_1 %u% OPI_g_2)$name),
"red",ifelse(igraph::V(OPI_g_1 %u% OPI_g_2)$name == "GLI1",
"yellow","#00CCFF")), edge.color="blue",
vertex.shape = ifelse(grepl("miR",igraph::V(OPI_g_1 %u% OPI_g_2)$name),
"vrectangle","circle"),edge.width=0.8)
head(get_interaction_databases(),10)
interactions <-
import_Omnipath_Interactions(filter_databases=c("SignaLink3","PhosphoSite", "Signor"))
print_interactions(head(interactions))
OPI_g <- interaction_graph(interactions = interactions)
printPath_es(shortest_paths(OPI_g,from = "TYRO3",to = "STAT3",
output = 'epath')$epath[[1]],OPI_g)
printPath_vs(all_shortest_paths(OPI_g,from = "DYRK2",
to = "MAPKAPK2")$res,OPI_g)
OPI_g_undirected <- as.undirected(OPI_g, mode=c("mutual"))
OPI_g_undirected <- simplify(OPI_g_undirected)
cl_results <- cluster_fast_greedy(OPI_g_undirected)
cluster_id <- cl_results$membership[which(cl_results$names == "SOCS3")]
module_graph <- induced_subgraph(OPI_g_undirected,
V(OPI_g)$name[which(cl_results$membership == cluster_id)])
par(mar=c(0.1,0.1,0.1,0.1))
plot(module_graph, vertex.label.color="black",vertex.frame.color="#ffffff",
vertex.size= 15, edge.curved=.2,
vertex.color = ifelse(igraph::V(module_graph)$name == "CD22","yellow",
"#00CCFF"), edge.color="blue",edge.width=0.8)
OPI_g_undirected <- as.undirected(OPI_g, mode=c("mutual"))
OPI_g_undirected <- simplify(OPI_g_undirected)
cl_results <- cluster_fast_greedy(OPI_g_undirected)
cluster_id <- cl_results$membership[which(cl_results$names == "EGFR")]
module_graph <- induced_subgraph(OPI_g_undirected,
V(OPI_g)$name[which(cl_results$membership == cluster_id)])
par(mar=c(0.1,0.1,0.1,0.1))
plot(module_graph, vertex.label.color="black",vertex.frame.color="#ffffff",
vertex.size= 15, edge.curved=.2,
vertex.color = ifelse(igraph::V(module_graph)$name == "CD22","yellow",
"#00CCFF"), edge.color="blue",edge.width=0.8)
#interaction from pathwayextra dataset
interactions <-
import_PathwayExtra_Interactions(filter_databases=c("BioGRID","IntAct"),
select_organism = 10090)
# 1)We select all the interactions in which Amfr gene is involved
interactions_Amfr <- dplyr::filter(interactions, source_genesymbol == "Amfr",
target_genesymbol == "Amfr")
# 2)We print these interactions:
print_interactions(interactions_Amfr)
#interaction from kinaseextra dataset
interactions <-
import_KinaseExtra_Interactions(filter_databases=c("PhosphoPoint",
"PhosphoSite"), select_organism = 10116)
# 1)We select the interactions in which Dpysl2 gene is a target
interactions_TargetDpysl2 <- dplyr::filter(interactions,
target_genesymbol == "Dpysl2")
# 2)We print these interactions:
print_interactions(interactions_TargetDpysl2)
# interaction from ligrecextra dataset
interactions <- import_LigrecExtra_Interactions(filter_databases=c("HPRD",
"Guide2Pharma"),select_organism=9606)
# 1)Receptors of the CDH1 ligand.
interactions_CDH1 <- dplyr::filter(interactions, source_genesymbol == "CDH1")
# 2)We transform the interactions data frame into a graph
OPI_g <- interaction_graph(interactions = interactions_CDH1)
# 3)We induce a network with the genes involved in the shortest path and their
#    first neighbors to get a more general overview of the interactions
Induced_Network <- dNetInduce(g=OPI_g,
nodes_query=as.character( V(OPI_g)$name), knn=0,
remove.loops=FALSE, largest.comp=FALSE)
# 4)We print the induced network
par(mar=c(0.1,0.1,0.1,0.1))
plot(Induced_Network, vertex.label.color="black",
vertex.frame.color="#ffffff",vertex.size= 20, edge.curved=.2,
vertex.color =
ifelse(igraph::V(Induced_Network)$name %in% c("CDH1"),
"yellow","#00CCFF"), edge.color="blue",edge.width=0.8)
#clustering
#%
OPI_g_undirected <- as.undirected(OPI_g, mode=c("mutual"))
interactions <-
import_PathwayExtra_Interactions(filter_databases=c("BioGRID","IntAct"),
select_organism = 10090)
# 1)We select all the interactions in which Amfr gene is involved
interactions_Amfr <- dplyr::filter(interactions, source_genesymbol == "Amfr",
target_genesymbol == "Amfr")
# 2)We print these interactions:
print_interactions(interactions_Amfr)
#interaction from kinaseextra dataset
interactions <-
import_KinaseExtra_Interactions(filter_databases=c("PhosphoPoint",
"PhosphoSite"), select_organism = 10116)
# 1)We select the interactions in which Dpysl2 gene is a target
interactions_TargetDpysl2 <- dplyr::filter(interactions,
target_genesymbol == "Dpysl2")
# 2)We print these interactions:
print_interactions(interactions_TargetDpysl2)
# interaction from ligrecextra dataset
interactions <- import_LigrecExtra_Interactions(filter_databases=c("HPRD",
"Guide2Pharma"),select_organism=9606)
# 1)Receptors of the CDH1 ligand.
#interaction from kinaseextra dataset
interactions <-
import_KinaseExtra_Interactions(filter_databases=c("PhosphoPoint",
"PhosphoSite"), select_organism = 10116)
# 1)We select the interactions in which Dpysl2 gene is a target
interactions_TargetDpysl2 <- dplyr::filter(interactions,
target_genesymbol == "Dpysl2")
# 2)We print these interactions:
print_interactions(interactions_TargetDpysl2)
#interaction from kinaseextra dataset
interactions <-
import_KinaseExtra_Interactions(filter_databases=c("PhosphoPoint",
"PhosphoSite"), select_organism = 10116)
# 1)We select the interactions in which Dpysl2 gene is a target
interactions_TargetDpysl2 <- dplyr::filter(interactions,
target_genesymbol == "Dpysl2")
# 2)We print these interactions:
print_interactions(interactions_TargetDpysl2)
interactions <- import_LigrecExtra_Interactions(filter_databases=c("HPRD",
"Guide2Pharma"),select_organism=9606)
# 1)Receptors of the CDH1 ligand.
interactions_CDH1 <- dplyr::filter(interactions, source_genesymbol == "CDH1")
# 2)We transform the interactions data frame into a graph
OPI_g <- interaction_graph(interactions = interactions_CDH1)
# 3)We induce a network with the genes involved in the shortest path and their
#    first neighbors to get a more general overview of the interactions
Induced_Network <- dNetInduce(g=OPI_g,
nodes_query=as.character( V(OPI_g)$name), knn=0,
remove.loops=FALSE, largest.comp=FALSE)
# 4)We print the induced network
par(mar=c(0.1,0.1,0.1,0.1))
plot(Induced_Network, vertex.label.color="black",
vertex.frame.color="#ffffff",vertex.size= 20, edge.curved=.2,
vertex.color =
ifelse(igraph::V(Induced_Network)$name %in% c("CDH1"),
"yellow","#00CCFF"), edge.color="blue",edge.width=0.8)
#interaction from DoRothEA dataset
interactions <- import_TFregulons_Interactions(filter_databases=c("DoRothEA_A",
"ARACNe-GTEx_DoRothEA"),select_organism=9606)
# 1)We select the most confident interactions for a given TF and we print
#   the interactions to check the way it regulates its different targets
interactions_A_GLI1 <- dplyr::filter(interactions, dorothea_level=="A",
source_genesymbol == "GLI1")
print_interactions(interactions_A_GLI1)
#interaction from mirnatarget dataset
interactions <-
import_miRNAtarget_Interactions(filter_databases=c("miRTarBase","miRecords"))
# 1)We select the interactions where a miRNA is interacting with the TF
#   used in the previous code chunk and we print these interactions.
interactions_miRNA_GLI1 <-
dplyr::filter(interactions, target_genesymbol == "GLI1")
print_interactions(interactions_miRNA_GLI1)
# 2)We transform the previous selections to graphs (igraph objects)
OPI_g_1 <-interaction_graph(interactions = interactions_A_GLI1)
OPI_g_2 <-interaction_graph(interactions = interactions_miRNA_GLI1)
# 3)We print the union of both previous graphs
par(mar=c(0.1,0.1,0.1,0.1))
plot(OPI_g_1 %u% OPI_g_2, vertex.label.color="black",
vertex.frame.color="#ffffff",vertex.size= 20, edge.curved=.25,
vertex.color = ifelse(grepl("miR",igraph::V(OPI_g_1 %u% OPI_g_2)$name),
"red",ifelse(igraph::V(OPI_g_1 %u% OPI_g_2)$name == "GLI1",
"yellow","#00CCFF")), edge.color="blue",
vertex.shape = ifelse(grepl("miR",igraph::V(OPI_g_1 %u% OPI_g_2)$name),
"vrectangle","circle"),edge.width=0.8)
#Post-translational modification
# 1)We check the different PTMs databases
get_ptms_databases()
# 2)We query and store the ptms into a dataframe. No filtering in this case.
ptms <- import_Omnipath_PTMS()
# 3)We can select and print the reactions between a specific kinase and substrate
print_interactions(dplyr::filter(ptms,enzyme_genesymbol=="MAP2K1",
substrate_genesymbol=="MAPK3"))
# 4)In the previous results, we can see that ptms does not contain sign
#   (activation/inhibition). We can generate this information based on the
#   protein-protein Omnipath interaction dataset.
interactions <- import_Omnipath_Interactions()
ptms <- get_signed_ptms(ptms,interactions)
# 5)We select again the same kinase and substrate. Now we have information
#   about inhibition or activation when we print the ptms
print_interactions(dplyr::filter(ptms,enzyme_genesymbol=="MAP2K1",
substrate_genesymbol=="MAPK3"))
# 6)We can also transform the ptms into a graph.
ptms_g <- ptms_graph(ptms = ptms)
# 7)We download PTMs for mouse
ptms <- import_Omnipath_PTMS(filter_databases=c("PhosphoSite", "Signor"),
select_organism=10090)
get_complexes_databases()
# 2)We query and store complexes from some sources into a dataframe.
complexes <- import_Omnipath_complexes(filter_databases=c("CORUM", "hu.MAP"))
# 3)We check all the molecular complexes where a set of genes participate
query_genes <- c("WRN","PARP1")
# 4)Complexes where any of the input genes participate
complexes_query_genes_any <- unique(get_complex_genes(complexes,query_genes,
total_match=FALSE))
# 5)We print the components of the different selected components
head(complexes_query_genes_any$components_genesymbols,6)
# 6)Complexes where all the input genes participate jointly
complexes_query_genes_join <- unique(get_complex_genes(complexes,query_genes,
total_match=TRUE))
# 7)We print the components of the different selected components
complexes_query_genes_join$components_genesymbols
genes_complex <-
unlist(strsplit(complexes_query_genes_join$components_genesymbols, "_"))
# 8)We can perform an enrichment analyses with the genes in the complex
EnrichmentResults <- gost(genes_complex, significant = TRUE,
user_threshold = 0.001, correction_method = c("fdr"),
sources=c("GO:BP","GO:CC","GO:MF"))
# 9)The most significant results
EnrichmentResults$result %>%
dplyr::select(term_id, source, term_name,p_value) %>%
dplyr::top_n(5,-p_value)
#Annotations
# 1)We check the different annotation databases
get_annotation_databases()
# 2)We first get the annotations of the complex itself:
annotations <-import_Omnipath_annotations(select_genes=paste0("COMPLEX:",
complexes_query_genes_join$components_genesymbols))
head(dplyr::select(annotations,source,label,value),10)
# 3)Pathways where the proteins belong:
annotations <- import_Omnipath_annotations(select_genes=genes_complex,
filter_databases=c("NetPath"))
dplyr::select(annotations,genesymbol,value)
# 4)Cellular localization of our proteins
annotations <-import_Omnipath_annotations(select_genes=genes_complex,
filter_databases=c("ComPPI"))
# 5)Since we have same record_id for some results of our query, we spread these records across columns
spread(annotations, label,value) %>%
dplyr::arrange(desc(score)) %>%
dplyr::top_n(10, score)
#intercellular signaling /intercell
# 1)We check some of the different intercell categories
head(get_intercell_categories(),10)
# 2)We import the intercell data into a dataframe
intercell <- import_Omnipath_intercell()
# 3)We check the intercell annotations for the individual components of
#   our previous complex. We filter our data to print it in a good format
dplyr::filter(intercell,genesymbol %in% genes_complex) %>%
dplyr::distinct(genesymbol, parent, .keep_all = TRUE) %>%
dplyr::select(category, genesymbol, parent) %>%
dplyr::arrange(genesymbol)
library(dplyr)
library(ggplot2)
library(OmnipathR)
library(igraph)
library(ggraph)
install.packages("ggraph")
library(dplyr)
interactions = import_Omnipath_Interactions() %>% as_tibble()
#2)convert to igraph onjects
OPI_g = interaction_graph(interactions = interactions )
library(dbparser)
library(XML)
install.packages("XML")
install.packages("dbparser")
browseVignettes("OmnipathR")
library(OmnipathR)
library(tidyr)
library(dnet)
library(gprofiler2)
trt_sh=read.delim('../Desktop/MSc/Szakgyak/Internship/results/trt_shRNA.txt', header = FALSE, sep = "\t", dec = ".")
trt_sh=read.delim("../Desktop/MSc/Szakgyak/Internship/results/trt_shRNA.txt", header = FALSE, sep = "\t", dec = ".")
trt_xpr=read.delim("../Desktop/MSc/Szakgyak/Internship/results/trt_xpr.txt", header=FALSE, sep="\t", dec = ".")
trt_sh
trt_sh <-  trt_sh %>%
select(-target_name, -organism) %>%
mutate(in_OP = gene_id %in% c(interactions$source))
# not all drug-targets are in OP.
print(all(trt_sh$in_OP))
trt_xpr <-  trt_xpr %>%
select(-target_name, -organism) %>%
mutate(in_OP = gene_id %in% c(interactions$source))
# not all drug-targets are in OP.
print(all(trt_xpr$in_OP))
trt_xpr <-  trt_xpr %>%
select( -organism) %>%
mutate(in_OP = gene_id %in% c(interactions$source))
# not all drug-targets are in OP.
print(all(trt_xpr$in_OP))
trt_xpr <-  trt_xpr %>%
select() %>%
mutate(in_OP = gene_id %in% c(interactions$source))
# not all drug-targets are in OP.
print(all(trt_xpr$in_OP))
OPI_g <- interaction_graph(interactions = interactions)
intersect(trt_sh, OPI_g)
OPI_g <- interaction_graph(interactions = interactions, filter_databases=c(trt_sh))
OPI_g <- interaction_graph(interactions = interactions, filter_databases=(trt_sh))
install.packages("crunch")
filter(.interactions, trt_sh, preserve=FALSE)
OPI_g <- interaction_graph(interactions = interactions)
Induced_Network <- dNetInduce(g=OPI_g,
nodes_query=as.character( V(OPI_g)$name), knn=0,
remove.loops=FALSE, largest.comp=FALSE)
library(igraph)
neighborhood(OPI_g,nodes=c("EGFR"))
DM = distances(OPI_g)
write.csv(DM, "../Desktop/MSc/Szakgyak/Internship/data/gene_distances.csv",row.names = TRUE, sep="," )
write.csv(DM, "../Desktop/MSc/Szakgyak/Internship/data/gene_distances.csv",row.names = TRUE )
interactions=import_Omnipath_Interactions()
write.csv(interactions, "../Desktop/Szakgyak/Internship/data/OP_interactions.csv",row.names = TRUE)
write.csv(interactions, "../Desktop/Szakgyak/Internship/data/OP_interactions.csv",row.names = TRUE)
library(OmnipathR)
library(tidyr)
library(dnet)
library(gprofiler2)
library(igraph)
interactions=import_Omnipath_Interactions()
write.csv(interactions, "../Desktop/Szakgyak/Internship/data/OP_interactions.csv",row.names = TRUE)
write.csv(interactions, w, "../Desktop/Szakgyak/Internship/data/OP_interactions.csv",row.names = TRUE)
write.csv(interactions, "../Desktop/Szakgyak/Internship/data/OP_interactions.csv",row.names = TRUE)
write.csv(interactions, "../Desktop/Szakgyak/Internship/data/OP_interactions.csv", append= FALSE,row.names = TRUE)
interctions
interactions=import_Omnipath_Interactions()
interctions
interactions
write.csv(interactions, "../Desktop/Szakgyak/Internship/data/OP_interactions.csv",row.names = TRUE)
write.csv(interactions, "../Desktop/Szakgyak/Internship/data/OP_interact.csv",row.names = TRUE)
library(OmnipathR)
library(tidyr)
library(dnet)
library(gprofiler2)
library("supraHex")
library("hexbin")
library("dnet")
interactions=import_Omnipath_Interactions()
write.csv(interactions, "../Desktop/Szakgyak/Internship/data/OP_interact.csv",row.names = TRUE)
write.csv(interactions, "../Desktop/Szakgyak/Internship/data/OPinteract.csv",row.names = TRUE)
write.csv(interactions, "../Desktop/MSc/Szakgyak/Internship/data/OP_interact.csv",row.names = TRUE)
install.packages("NetworkDistance")
installed.packages()
library(NetworkDistance)
NetworkDistance
NetworkDistance:
NetworkDistance::graph20
library(NetworkDistance)
NetworkDistance::graph20
library(NetworkDistance)
help("graph20")
data("graph20")
force(graph20)
typeof(graph20)
dist.gdd <- nd.gdd(graph20)
View(dist.gdd)
View(dist.gdd)
View(dist.gdd)
View(graph20)
View(graph20)
dist.wsd <- nd.wsd(graph20)
dist.dsd <- nd.dsd(graph20, type="SLap")
library(NetworkDistance)
help("graph20")
data("graph20")
force(graph20)
typeof(graph20)
dist.gdd <- nd.gdd(graph20)
dist.wsd <- nd.wsd
View(dist.wsd)
dist.dsd <- nd.dsd(graph20, type="SLap")
gdd2 = stats::cmdscale(dist.gdd$D, k=2)
wsd2 = stats::cmdscale(dist.wsd$D, k=2)
dsd2 = stats::cmdscale(dist.dsd$D, k=2)
nfd2 = stats::cmdscale(dist.nfd$D, k=2)
View(dsd2)
View(dsd2)
plot(dsd2)
plot(gdd2)
plot(graph20)
library(GEOquery)
BiocManager::install("GEOquery")
library(GEOguery)
BiocManager::install("GEOquery")
library(GEOguery)
BiocManager::install("GEOquery")
library(GEOquery)
BiocManager::install("ArrayExpress")
library(ArrayExpress)
BiocManager::install("WCGNA")
library(WCGNA)
library(WCGNA)
library(WCGNA)
library(ArrayExpress)
BiocManager::install("WGCNA")
library(WGCNA)
library(WGCNA)
> BiocManager::install("Biobase")
BiocManager::install("WGCNA")
BiocManager::install("Biobase")
library(Biobase)
BiocManager::install("limma")
library(limma)
library(limma)
source('C:/Users/nidik/Desktop/MSc/Szakdoga/Thesis/code/download_GEO.R')
source('C:/Users/nidik/Desktop/MSc/Szakdoga/Thesis/code/download_GEO.R')
source('C:/Users/nidik/Desktop/MSc/Szakdoga/Thesis/code/download_GEO.R')
source('C:/Users/nidik/Desktop/MSc/Szakdoga/Thesis/code/download_GEO.R')
source('C:/Users/nidik/Desktop/MSc/Szakdoga/Thesis/code/download_GEO.R')
source('C:/Users/nidik/Desktop/MSc/Szakdoga/Thesis/code/download_GEO.R')
