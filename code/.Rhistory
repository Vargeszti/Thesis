ptms <- get_signed_ptms(ptms,interactions)
# 5)We select again the same kinase and substrate. Now we have information
#   about inhibition or activation when we print the ptms
print_interactions(dplyr::filter(ptms,enzyme_genesymbol=="MAP2K1",
substrate_genesymbol=="MAPK3"))
# 6)We can also transform the ptms into a graph.
ptms_g <- ptms_graph(ptms = ptms)
# 7)We download PTMs for mouse
ptms <- import_Omnipath_PTMS(filter_databases=c("PhosphoSite", "Signor"),
select_organism=10090)
get_complexes_databases()
# 2)We query and store complexes from some sources into a dataframe.
complexes <- import_Omnipath_complexes(filter_databases=c("CORUM", "hu.MAP"))
# 3)We check all the molecular complexes where a set of genes participate
query_genes <- c("WRN","PARP1")
# 4)Complexes where any of the input genes participate
complexes_query_genes_any <- unique(get_complex_genes(complexes,query_genes,
total_match=FALSE))
# 5)We print the components of the different selected components
head(complexes_query_genes_any$components_genesymbols,6)
# 6)Complexes where all the input genes participate jointly
complexes_query_genes_join <- unique(get_complex_genes(complexes,query_genes,
total_match=TRUE))
# 7)We print the components of the different selected components
complexes_query_genes_join$components_genesymbols
genes_complex <-
unlist(strsplit(complexes_query_genes_join$components_genesymbols, "_"))
# 8)We can perform an enrichment analyses with the genes in the complex
EnrichmentResults <- gost(genes_complex, significant = TRUE,
user_threshold = 0.001, correction_method = c("fdr"),
sources=c("GO:BP","GO:CC","GO:MF"))
# 9)The most significant results
EnrichmentResults$result %>%
dplyr::select(term_id, source, term_name,p_value) %>%
dplyr::top_n(5,-p_value)
#Annotations
# 1)We check the different annotation databases
get_annotation_databases()
# 2)We first get the annotations of the complex itself:
annotations <-import_Omnipath_annotations(select_genes=paste0("COMPLEX:",
complexes_query_genes_join$components_genesymbols))
head(dplyr::select(annotations,source,label,value),10)
# 3)Pathways where the proteins belong:
annotations <- import_Omnipath_annotations(select_genes=genes_complex,
filter_databases=c("NetPath"))
dplyr::select(annotations,genesymbol,value)
# 4)Cellular localization of our proteins
annotations <-import_Omnipath_annotations(select_genes=genes_complex,
filter_databases=c("ComPPI"))
# 5)Since we have same record_id for some results of our query, we spread these records across columns
spread(annotations, label,value) %>%
dplyr::arrange(desc(score)) %>%
dplyr::top_n(10, score)
#intercellular signaling /intercell
# 1)We check some of the different intercell categories
head(get_intercell_categories(),10)
# 2)We import the intercell data into a dataframe
intercell <- import_Omnipath_intercell()
# 3)We check the intercell annotations for the individual components of
#   our previous complex. We filter our data to print it in a good format
dplyr::filter(intercell,genesymbol %in% genes_complex) %>%
dplyr::distinct(genesymbol, parent, .keep_all = TRUE) %>%
dplyr::select(category, genesymbol, parent) %>%
dplyr::arrange(genesymbol)
library(dplyr)
library(ggplot2)
library(OmnipathR)
library(igraph)
library(ggraph)
install.packages("ggraph")
library(dplyr)
interactions = import_Omnipath_Interactions() %>% as_tibble()
#2)convert to igraph onjects
OPI_g = interaction_graph(interactions = interactions )
library(dbparser)
library(XML)
install.packages("XML")
install.packages("dbparser")
browseVignettes("OmnipathR")
library(OmnipathR)
library(tidyr)
library(dnet)
library(gprofiler2)
trt_sh=read.delim('../Desktop/MSc/Szakgyak/Internship/results/trt_shRNA.txt', header = FALSE, sep = "\t", dec = ".")
trt_sh=read.delim("../Desktop/MSc/Szakgyak/Internship/results/trt_shRNA.txt", header = FALSE, sep = "\t", dec = ".")
trt_xpr=read.delim("../Desktop/MSc/Szakgyak/Internship/results/trt_xpr.txt", header=FALSE, sep="\t", dec = ".")
trt_sh
trt_sh <-  trt_sh %>%
select(-target_name, -organism) %>%
mutate(in_OP = gene_id %in% c(interactions$source))
# not all drug-targets are in OP.
print(all(trt_sh$in_OP))
trt_xpr <-  trt_xpr %>%
select(-target_name, -organism) %>%
mutate(in_OP = gene_id %in% c(interactions$source))
# not all drug-targets are in OP.
print(all(trt_xpr$in_OP))
trt_xpr <-  trt_xpr %>%
select( -organism) %>%
mutate(in_OP = gene_id %in% c(interactions$source))
# not all drug-targets are in OP.
print(all(trt_xpr$in_OP))
trt_xpr <-  trt_xpr %>%
select() %>%
mutate(in_OP = gene_id %in% c(interactions$source))
# not all drug-targets are in OP.
print(all(trt_xpr$in_OP))
OPI_g <- interaction_graph(interactions = interactions)
intersect(trt_sh, OPI_g)
OPI_g <- interaction_graph(interactions = interactions, filter_databases=c(trt_sh))
OPI_g <- interaction_graph(interactions = interactions, filter_databases=(trt_sh))
install.packages("crunch")
filter(.interactions, trt_sh, preserve=FALSE)
OPI_g <- interaction_graph(interactions = interactions)
Induced_Network <- dNetInduce(g=OPI_g,
nodes_query=as.character( V(OPI_g)$name), knn=0,
remove.loops=FALSE, largest.comp=FALSE)
library(igraph)
neighborhood(OPI_g,nodes=c("EGFR"))
DM = distances(OPI_g)
write.csv(DM, "../Desktop/MSc/Szakgyak/Internship/data/gene_distances.csv",row.names = TRUE, sep="," )
write.csv(DM, "../Desktop/MSc/Szakgyak/Internship/data/gene_distances.csv",row.names = TRUE )
interactions=import_Omnipath_Interactions()
write.csv(interactions, "../Desktop/Szakgyak/Internship/data/OP_interactions.csv",row.names = TRUE)
write.csv(interactions, "../Desktop/Szakgyak/Internship/data/OP_interactions.csv",row.names = TRUE)
library(OmnipathR)
library(tidyr)
library(dnet)
library(gprofiler2)
library(igraph)
interactions=import_Omnipath_Interactions()
write.csv(interactions, "../Desktop/Szakgyak/Internship/data/OP_interactions.csv",row.names = TRUE)
write.csv(interactions, w, "../Desktop/Szakgyak/Internship/data/OP_interactions.csv",row.names = TRUE)
write.csv(interactions, "../Desktop/Szakgyak/Internship/data/OP_interactions.csv",row.names = TRUE)
write.csv(interactions, "../Desktop/Szakgyak/Internship/data/OP_interactions.csv", append= FALSE,row.names = TRUE)
interctions
interactions=import_Omnipath_Interactions()
interctions
interactions
write.csv(interactions, "../Desktop/Szakgyak/Internship/data/OP_interactions.csv",row.names = TRUE)
write.csv(interactions, "../Desktop/Szakgyak/Internship/data/OP_interact.csv",row.names = TRUE)
library(OmnipathR)
library(tidyr)
library(dnet)
library(gprofiler2)
library("supraHex")
library("hexbin")
library("dnet")
interactions=import_Omnipath_Interactions()
write.csv(interactions, "../Desktop/Szakgyak/Internship/data/OP_interact.csv",row.names = TRUE)
write.csv(interactions, "../Desktop/Szakgyak/Internship/data/OPinteract.csv",row.names = TRUE)
write.csv(interactions, "../Desktop/MSc/Szakgyak/Internship/data/OP_interact.csv",row.names = TRUE)
install.packages("NetworkDistance")
installed.packages()
library(NetworkDistance)
NetworkDistance
NetworkDistance:
NetworkDistance::graph20
library(NetworkDistance)
NetworkDistance::graph20
library(NetworkDistance)
help("graph20")
data("graph20")
force(graph20)
typeof(graph20)
dist.gdd <- nd.gdd(graph20)
View(dist.gdd)
View(dist.gdd)
View(dist.gdd)
View(graph20)
View(graph20)
dist.wsd <- nd.wsd(graph20)
dist.dsd <- nd.dsd(graph20, type="SLap")
library(NetworkDistance)
help("graph20")
data("graph20")
force(graph20)
typeof(graph20)
dist.gdd <- nd.gdd(graph20)
dist.wsd <- nd.wsd
View(dist.wsd)
dist.dsd <- nd.dsd(graph20, type="SLap")
gdd2 = stats::cmdscale(dist.gdd$D, k=2)
wsd2 = stats::cmdscale(dist.wsd$D, k=2)
dsd2 = stats::cmdscale(dist.dsd$D, k=2)
nfd2 = stats::cmdscale(dist.nfd$D, k=2)
View(dsd2)
View(dsd2)
plot(dsd2)
plot(gdd2)
plot(graph20)
library(GEOquery)
BiocManager::install("GEOquery")
library(GEOguery)
BiocManager::install("GEOquery")
library(GEOguery)
BiocManager::install("GEOquery")
library(GEOquery)
BiocManager::install("ArrayExpress")
library(ArrayExpress)
BiocManager::install("WCGNA")
library(WCGNA)
library(WCGNA)
library(WCGNA)
library(ArrayExpress)
BiocManager::install("WGCNA")
library(WGCNA)
library(WGCNA)
> BiocManager::install("Biobase")
BiocManager::install("WGCNA")
BiocManager::install("Biobase")
library(Biobase)
BiocManager::install("limma")
library(limma)
library(limma)
library(GEOquery)
library(GEOquery)
library(limma)
library(limma)
### first experiment:
geo_id = 'GSE32316'
ctrl = 'GSM800590|GSM800591|GSM800592|GSM800593|GSM800594|GSM800595'
stim = 'GSM800596|GSM800597|GSM800598|GSM800599|GSM800600|GSM800601'
library(GEOquery)
library(limma)
### first experiment:
geo_id = 'GSE32316'
ctrl = 'GSM800590|GSM800591|GSM800592|GSM800593|GSM800594|GSM800595'
stim = 'GSM800596|GSM800597|GSM800598|GSM800599|GSM800600|GSM800601'
ctrl = strsplit(ctrl, '|', fixed = TRUE)[[1]]
stim = strsplit(stim, '|', fixed = TRUE)[[1]]
data = getGEO(geo_id, GSEMatrix=TRUE, AnnotGPL = TRUE)
data = data[[1]]
data
data = data[[1]]
data
eset = exprs(data)
eset = exprs(data)
require(Biobase)
eset = exprs(data)
### first experiment:
geo_id = 'GSE32316'
ctrl = 'GSM800590|GSM800591|GSM800592|GSM800593|GSM800594|GSM800595'
stim = 'GSM800596|GSM800597|GSM800598|GSM800599|GSM800600|GSM800601'
ctrl = strsplit(ctrl, '|', fixed = TRUE)[[1]]
stim = strsplit(stim, '|', fixed = TRUE)[[1]]
data = getGEO(geo_id, GSEMatrix=TRUE, AnnotGPL = TRUE)
data = data[[1]]
eset = exprs(data)
eset = as.data.frame(eset)
annot = fData(data)$`Gene symbol`
annot
eset$MEAN = apply(eset, 1, mean)
eset
eset$GENE = annot
eset
eset = eset[order(eset$MEAN, decreasing = TRUE),]
eset = eset[!duplicated(eset$GENE),]
eset
rownames(eset) = eset$GENE
eset
n = dim(eset)[2]
eset = eset[,c(-n, -n+1)]
x = rep(0, length(ctrl) + length(stim))
x
names(x) = c(ctrl,stim)
x
x[stim] = 1
x
design=model.matrix(~1 + x)
design
rownames(design) = names(x)
design
eset = eset[ ,rownames(design)]
eset
fit <- lmFit(eset, design)
fit = eBayes(fit)
fit
results = topTable(fit, coef = 'x', adjust="BH",number = 1000000)
results
library(GEOquery)
library(limma)
require(Biobase)
### second experiment:
geo_id = 'GSE14411'
ctrl = 'GSM360098|GSM360099|GSM360100'
stim = 'GSM360101|GSM360102|GSM360103'
ctrl = strsplit(ctrl, '|', fixed = TRUE)[[1]]
ctrl
stim = strsplit(stim, '|', fixed = TRUE)[[1]]
stim
data = getGEO(geo_id, GSEMatrix=TRUE, AnnotGPL = TRUE)
data = data[[1]]
data
eset = exprs(data) #eset=expession set
eset = as.data.frame(eset)
eset
annot = fData(data)$`Gene symbol`
annot
eset$MEAN = apply(eset, 1, mean)
eset$GENE = annot
eset
eset = eset[order(eset$MEAN, decreasing = TRUE),]
eset = eset[order(eset$MEAN, decreasing = TRUE),]
eset = eset[!duplicated(eset$GENE),]
eset
rownames(eset) = eset$GENE
n = dim(eset)[2]
eset = eset[,c(-n, -n+1)] #utolsó 2 sort levágja
eset
x = rep(0, length(ctrl) + length(stim))
names(x) = c(ctrl,stim)
x[stim] = 1
x
design=model.matrix(~1 + x)
rownames(design) = names(x)
design
eset = eset[ ,rownames(design)]
eset
#Estimate the fold changes and standard errors by fitting
#a linear model for each gene. The design matrix indicates which arrays are dye-swaps
fit <- lmFit(eset, design) #limma t test correction
#Apply empirical Bayes smoothing to the standard errors
fit = eBayes(fit)
fit
#Show statistics for the top 10 genes.
results = topTable(fit, coef = 'x', adjust="BH",number = 1000000)
results
write.csv(results, '../results/GSE14411.csv')
library(GEOquery)
library(limma)
require(Biobase)
### second experiment:
geo_id = 'GSE14411'
ctrl = 'GSM360098|GSM360099|GSM360100'
stim = 'GSM360101|GSM360102|GSM360103'
ctrl = strsplit(ctrl, '|', fixed = TRUE)[[1]]
stim = strsplit(stim, '|', fixed = TRUE)[[1]]
data = getGEO(geo_id, GSEMatrix=TRUE, AnnotGPL = TRUE)
data = data[[1]]
eset = exprs(data) #eset=expession set
eset = as.data.frame(eset)
annot = fData(data)$`Gene symbol`
eset$MEAN = apply(eset, 1, mean)
eset$GENE = annot
eset = eset[order(eset$MEAN, decreasing = TRUE),]
eset = eset[!duplicated(eset$GENE),]
rownames(eset) = eset$GENE
n = dim(eset)[2]
eset = eset[,c(-n, -n+1)] #utolsó 2 sort levágja
x = rep(0, length(ctrl) + length(stim))
names(x) = c(ctrl,stim)
x[stim] = 1
design=model.matrix(~1 + x)
rownames(design) = names(x)
eset = eset[ ,rownames(design)]
#Estimate the fold changes and standard errors by fitting
#a linear model for each gene. The design matrix indicates which arrays are dye-swaps
fit <- lmFit(eset, design) #limma t test correction
#Apply empirical Bayes smoothing to the standard errors
fit = eBayes(fit)
#Show statistics for the top 10 genes.
results = topTable(fit, coef = 'x', adjust="BH",number = 1000000)
write.csv(results, '../results/GSE14411.csv')
write.csv(results, '../results/GSE14411.csv')
setwd("../Desktop/MSc/Szakdoga/Thesis/code/")
library(GEOquery)
library(limma)
require(Biobase)
### second experiment:
geo_id = 'GSE14411'
ctrl = 'GSM360098|GSM360099|GSM360100'
stim = 'GSM360101|GSM360102|GSM360103'
ctrl = strsplit(ctrl, '|', fixed = TRUE)[[1]]
stim = strsplit(stim, '|', fixed = TRUE)[[1]]
data = getGEO(geo_id, GSEMatrix=TRUE, AnnotGPL = TRUE)
data = data[[1]]
eset = exprs(data) #eset=expession set
eset = as.data.frame(eset)
annot = fData(data)$`Gene symbol`
eset$MEAN = apply(eset, 1, mean)
eset$GENE = annot
eset = eset[order(eset$MEAN, decreasing = TRUE),]
eset = eset[!duplicated(eset$GENE),]
rownames(eset) = eset$GENE
n = dim(eset)[2]
eset = eset[,c(-n, -n+1)] #utolsó 2 sort levágja
x = rep(0, length(ctrl) + length(stim))
names(x) = c(ctrl,stim)
x[stim] = 1
design=model.matrix(~1 + x)
rownames(design) = names(x)
eset = eset[ ,rownames(design)]
#Estimate the fold changes and standard errors by fitting
#a linear model for each gene. The design matrix indicates which arrays are dye-swaps
fit <- lmFit(eset, design) #limma t test correction
#Apply empirical Bayes smoothing to the standard errors
fit = eBayes(fit)
#Show statistics for the top 10 genes.
results = topTable(fit, coef = 'x', adjust="BH",number = 1000000)
write.csv(results, '../results/GSE14411.csv')
setwd("../Desktop/MSc/Szakdoga/Thesis/code/")
library(GEOquery)
library(limma)
require(Biobase)
### first experiment:
geo_id = 'GSE32316'
ctrl = 'GSM800590|GSM800591|GSM800592|GSM800593|GSM800594|GSM800595'
stim = 'GSM800596|GSM800597|GSM800598|GSM800599|GSM800600|GSM800601'
ctrl = strsplit(ctrl, '|', fixed = TRUE)[[1]]
stim = strsplit(stim, '|', fixed = TRUE)[[1]]
data = getGEO(geo_id, GSEMatrix=TRUE, AnnotGPL = TRUE)
data = data[[1]]
eset = exprs(data)
eset = as.data.frame(eset)
annot = fData(data)$`Gene symbol`
eset$MEAN = apply(eset, 1, mean)
eset$GENE = annot
eset = eset[order(eset$MEAN, decreasing = TRUE),]
eset = eset[!duplicated(eset$GENE),]
rownames(eset) = eset$GENE
n = dim(eset)[2]
eset = eset[,c(-n, -n+1)]
x = rep(0, length(ctrl) + length(stim))
names(x) = c(ctrl,stim)
x[stim] = 1
design=model.matrix(~1 + x)
rownames(design) = names(x)
eset = eset[ ,rownames(design)]
fit <- lmFit(eset, design)
fit = eBayes(fit)
results = topTable(fit, coef = 'x', adjust="BH",number = 1000000)
write.csv(results, '../results/GSE32316.csv')
source('C:/Users/nidik/Desktop/MSc/Szakdoga/Thesis/code/download_GEO.R')
source('C:/Users/nidik/Desktop/MSc/Szakdoga/Thesis/code/download_GEO.R')
setwd("C:/Users/nidik/Desktop/MSc/Szakdoga/Thesis/code/")
library(GEOquery)
library(GEOquery)
library(limma)
library(limma)
library(Biobase)
### first experiment:
geo_id = commandArgs(TRUE)[1]
ctrl = commandArgs(TRUE)[2]
stim = commandArgs(TRUE)[3]
sign = commandArgs(TRUE)[4]
fname = commandArgs(TRUE)[5]
ctrl = strsplit(ctrl, '|', fixed = TRUE)[[1]]
stim = strsplit(stim, '|', fixed = TRUE)[[1]]
data = getGEO(geo_id, GSEMatrix=TRUE, AnnotGPL = TRUE)
data = getGEO(geo_id, GSEMatrix=TRUE, AnnotGPL =TRUE)
### second experiment:
geo_id = 'GSE14411'
ctrl = 'GSM360098|GSM360099|GSM360100'
stim = 'GSM360101|GSM360102|GSM360103'
ctrl = strsplit(ctrl, '|', fixed = TRUE)[[1]]
stim = strsplit(stim, '|', fixed = TRUE)[[1]]
data = getGEO(geo_id, GSEMatrix=TRUE, AnnotGPL = TRUE)
geo_id = 'GSE4028'
ctrl = 'GSM92214|GSM92215|GSM92216'
stim = 'GSM92217|GSM92218|GSM92219|GSM92220'
sign = '1'
fname = '1374'
ctrl = strsplit(ctrl, '|', fixed = TRUE)[[1]]
stim = strsplit(stim, '|', fixed = TRUE)[[1]]
stim = strsplit(stim, '|', fixed = TRUE)[[1]]
stim = strsplit(stim, '|', fixed = TRUE)[[1]]
data = getGEO(geo_id, GSEMatrix=TRUE, AnnotGPL =TRUE)
data = data[[1]]
eset = exprs(data)
fil = apply(is.na(eset), 1, sum) == 0
eset = eset[fil,]
if (max(eset) > 1000){
eset = log2(eset+1)
}
eset = as.data.frame(eset)
annot = fData(data)$`Gene symbol`
eset
annot
annot = annot[fil]
eset$MEAN = apply(eset, 1, mean)
eset$GENE = annot
fil=eset$GENE!=''
eset=eset[fil,]
eset = eset[order(eset$MEAN, decreasing = TRUE),]
eset = eset[!duplicated(eset$GENE),]
rownames(eset) = eset$GENE
n = dim(eset)[2]
eset = eset[,c(-n, -n+1)]
x = rep(0, length(ctrl) + length(stim))
names(x) = c(ctrl,stim)
x[stim] = 1
design=model.matrix(~1 + x)
rownames(design) = names(x)
eset = eset[ ,rownames(design)]
eset
fit = eBayes(fit)
fit <- lmFit(eset, design)
fit = eBayes(fit)
results = topTable(fit, coef = 'x', adjust="BH",number = 1000000)
results$logFC = results$logFC * as.integer(sign)
results$t = results$t * as.integer(sign)
write.csv(results, paste0('../results/expression_data/',fname,'.csv'))
setwd("C:/Users/nidik/Desktop/MSc/Szakdoga/Thesis/code")
source('C:/Users/nidik/Desktop/MSc/Szakdoga/Thesis/code/download_GEO.R')
source('C:/Users/nidik/Desktop/MSc/Szakdoga/Thesis/code/download_GEO.R')
source('C:/Users/nidik/Desktop/MSc/Szakdoga/Thesis/code/download_GEO.R')
source('C:/Users/nidik/Desktop/MSc/Szakdoga/Thesis/code/download_GEO.R')
gene_perturb = read.csv('../results/gene_perturb.csv', sep=',', header=TRUE, row.names=1)
gene_perturb.head()
gene_perturb
source('C:/Users/nidik/Desktop/MSc/Szakdoga/Thesis/code/download_GEO.R')
